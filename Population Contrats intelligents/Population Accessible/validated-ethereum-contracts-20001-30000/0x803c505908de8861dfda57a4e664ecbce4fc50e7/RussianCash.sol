pragma solidity ^0.4.24;

contract Token {

    /// ?????????? ????? ?????????? ???????
    function totalSupply() constant returns (uint256 supply) {}

    /// ????????? ?????????. ?????, ? ???????? ????? ??????????? ??????.
    /// ?????????? ??????? ??????.
    function balanceOf(address _owner) constant returns (uint256 balance) {}

    /// ?????????? ?? ???????? `_value` ??????? ?? ????? `_to` ?? `msg.sender`
    /// ???????? _to ???????? ????? ??????????
    /// ???????? _value ???????? ?????????? ???????, ??????? ????? ??????????
    /// ?????????? ??????????, ???? ?? ?????????? ???????? ??? ???
    function transfer(address _to, uint256 _value) returns (bool success) {}

    /// ?????????? ?? ???????? `_value` ??????? ?? ????? `_to` ?? `_from` ??? ???????, ??? ???????????? `_from`
    /// ???????? _from ???????? ????? ???????????
    /// ???????? _to ???????? ????? ??????????
    /// ???????? _value ???????? ?????????? ???????, ??????? ????? ??????????
    /// ?????????? ??????????, ???? ?? ?????????? ???????? ??? ???
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}

    /// ?????????? `msg.sender` ??????????? `_addr` ??? ???????? `_value` ???????
    /// ???????? _spender ???????? ????? ?????, ? ???????? ????? ?????????? ??????
    /// ???????? _value ???????? ?????????? ???????, ??????? ????????? ?????????
    /// ?????????? ??????????, ???? ?? ?????????? ???????? ??? ???
    function approve(address _spender, uint256 _value) returns (bool success) {}
    
    /// ???????? _owner ???????? ????? ????????? ???????
    /// ???????? _spender ???????? ????? ?????, ? ???????? ????? ?????????? ??????
    /// ?????????? ?????????? ?? ?????????? ?????????? ???????, ??????? ????? ?????????
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract StandardToken is Token {
    function transfer(address _to, uint256 _value) returns (bool success) {

        //?? ????????? ??????????????, ??? totalSupply ?? ????? ???? ?????? (2^256 - 1).
        //???? ????? ?? ???????? totalSupply ? ????? ????????????? ????????? ??????, ?????????? ??????? ?? ???????????????? ??????.
        //???????? ???????? if ?? this one.
        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
        
                if (balances[msg.sender] >= _value && _value > 0) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        //??? ? ??????? ?????, ???????? ??? ?????? ??????????????, ???? ??????? ???????? ???????? ?? ???????????????????? ???????.  
        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }

    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
      return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    uint256 public totalSupply;
}

contract RussianCash is StandardToken { // ???????? ?????????. ???????? ???????? ?????????.

    /* ????????? ?????????? ?????? */

    /*
    ????????:
    ?????????????? ?????????? ???????????. ??? ??????? ????????????? ?? ????????.
    
      ??? ????????? ??????????????? ???????? ?????? ? ?? ?????? ?? ???????? ???????.
    ????????? ????????-????????/?????????? ????? ?? ???????????? ??? ???????.
    */
    string public name;                   // ???????? ??????
    uint8 public decimals;                // ??? ????? ?????????? ??????????. ?? ????????? ????????????? ????????, ?????? 18
    string public symbol;                 // ?????????????: ???????? SBX, XPR ? ?.?...
    string public version = 'H1.0'; 
    uint256 public unitsOneEthCanBuy;     // ??? ????? ?????? ?????? ?????? ????? ?????? ?? 1 ETH?
    uint256 public totalEthInWei;         // WEI ????????? ???????????? ???????? ETH (???????????? ????? ? USD ??? ?????? ? BTC). ????? ?? ????? ??????? ??? ???????????? ETH ????? ICO
    address public fundsWallet;           // ???? ?????? ???????????????? ???????????? ETH?

    // ??? ???????????-???????, ?? ??? ?????? ??????????????? ??????????????? ????????
    function RussianCash() {
        balances[msg.sender] = 1000000000000000000000000000;               // ???????????? ????????? ????????? ??? ????????? ??????. ? ????? ?????? ?????????? ????? 1000000000. ???? ?? ??????, ????? ?????????? ????????? ????? X, ? ?????????? ????????? 5, ?????????? ????????? ???????? X * 100000. (???????? ?????????)
        totalSupply = 1000000000000000000000000000;                        // ???????? ????? ?????? (1000000000 ??? ???????) (???????? ?????????)
        name = "Russian Cash";                                   // ?????????? ???????? ?????? ??? ??????????? ?? ??????? (???????? ?????????)
        decimals = 18;                                               // ?????????? ?????????? ?????? ????? ??????? ??? ??????????? ?? ??????? (???????? ?????????)
        symbol = "RUS";                                             // ????????????? ?????? ??? ??????????? ?? ??????? (???????? ?????????)
        unitsOneEthCanBuy = 2500;                                      // ?????????? ???? ?? ??????? ?????? ?????? ??? ICO (???????? ?????????)
        fundsWallet = msg.sender;                                    // ???????? ????????? ???????? ETH
    }

    function() payable{
        totalEthInWei = totalEthInWei + msg.value;
        uint256 amount = msg.value * unitsOneEthCanBuy;
        require(balances[fundsWallet] >= amount);

        balances[fundsWallet] = balances[fundsWallet] - amount;
        balances[msg.sender] = balances[msg.sender] + amount;

        Transfer(fundsWallet, msg.sender, amount); // ???????? ????????? ????????-????

        //????????? Ether ? fundsWallet
        fundsWallet.transfer(msg.value);                               
    }

    /* ??????????? ? ????? ????? ????????? */
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
        allowed[msg.sender][_spender] = _value;
       Approval(msg.sender, _spender, _value);

        //????? ??????? receiveApproval ? ?????????, ??????? ?? ?????? ?????????. ???? ??????? ?? ????????? ??????? ??????? ???????, ?? ? ????? ?????? ??? ?? ????? ???????? ? ????????.
        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)
        //? ????? ???????, ????? ? ??????? ?????? ?????? ???????. 
        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }
        return true;
    }
}