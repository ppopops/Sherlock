pragma solidity ^0.4.8;
/*
AvatarNetwork Copyright

https://avatarnetwork.io

*/

/* ???????????? ???????? */
contract Owned {

    /* ????? ????????? ?????????*/
    address owner;

    /* ??????????? ?????????, ?????????? ??? ?????? ??????? */
    function Owned() {
        owner = msg.sender;
    }

        /* ???????? ????????? ?????????, newOwner - ????? ?????? ????????? */
    function changeOwner(address newOwner) onlyowner {
        owner = newOwner;
    }


    /* ??????????? ??? ??????????? ??????? ? ???????? ?????? ??? ????????? */
    modifier onlyowner() {
        if (msg.sender==owner) _;
    }
}

// ??????????? ???????? ??? ?????? ????????? ERC 20
// https://github.com/ethereum/EIPs/issues/20
contract Token is Owned {

    /// ????? ???-?? ???????
    uint256 public totalSupply;

    /// @param _owner ?????, ? ???????? ????? ??????? ??????
    /// @return ??????
    function balanceOf(address _owner) constant returns (uint256 balance);

    /// @notice ????????? ???-?? `_value` ??????? ?? ????? `_to` ? ?????? `msg.sender`
    /// @param _to ????? ??????????
    /// @param _value ???-?? ??????? ??? ????????
    /// @return ???? ?? ???????? ???????? ??? ???
    function transfer(address _to, uint256 _value) returns (bool success);

    /// @notice ????????? ???-?? `_value` ??????? ?? ????? `_to` ? ?????? `_from` ??? ??????? ??? ??? ???????????? ???????????? `_from`
    /// @param _from ????? ???????????
    /// @param _to The address of the recipient
    /// @param _value The amount of token to be transferred
    /// @return Whether the transfer was successful or not
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);

    /// @notice ?????????? ??????? `msg.sender` ???????????? ??? ? ?????? `_spender` ???????? `_value` ???????
    /// @param _spender ????? ????????, ? ???????? ???????? ??????? ??????
    /// @param _value ???-?? ??????? ? ????????????? ??? ????????
    /// @return ???? ?? ????????????? ???????? ??? ???
    function approve(address _spender, uint256 _value) returns (bool success);

    /// @param _owner ????? ???????? ?????????? ????????
    /// @param _spender ????? ????????, ? ???????? ???????? ??????? ??????
    /// @return ???-?? ?????????? ??????? ??????????? ??? ????????
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

/*
???????? ????????? ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20
*/
contract ERC20Token is Token
{

    function transfer(address _to, uint256 _value) returns (bool success)
    {
        //??-????????? ??????????????, ??? totalSupply ?? ????? ???? ?????? (2^256 - 1).
        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[msg.sender] -= _value;
            balances[_to] += _value;
            Transfer(msg.sender, _to, _value);
            return true;
        } else { return false; }
    }

    function transferFrom(address _from, address _to, uint256 _value) returns (bool success)
    {
        //??-????????? ??????????????, ??? totalSupply ?? ????? ???? ?????? (2^256 - 1).
        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
            balances[_to] += _value;
            balances[_from] -= _value;
            allowed[_from][msg.sender] -= _value;
            Transfer(_from, _to, _value);
            return true;
        } else { return false; }
    }

    function balanceOf(address _owner) constant returns (uint256 balance)
    {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) returns (bool success)
    {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) constant returns (uint256 remaining)
    {
      return allowed[_owner][_spender];
    }

    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
}

/* ???????? ???????? ??????, ????????? ERC20Token */
contract CryptoShowCoin is ERC20Token
{

    bool public isTokenSale = true;
    uint256 public price;
    uint256 public limit;

    address walletOut = 0x6cb3af230cca6abfe2b4ad0723c088cbdd0805d2;

    function getWalletOut() constant returns (address _to) {
        return walletOut;
    }

    function () external payable  {
        if (isTokenSale == false) {
            throw;
        }

        uint256 tokenAmount = (msg.value  * 100000000) / price;

        if (balances[owner] >= tokenAmount && balances[msg.sender] + tokenAmount > balances[msg.sender]) {
            if (balances[owner] - tokenAmount < limit) {
                throw;
            }
            balances[owner] -= tokenAmount;
            balances[msg.sender] += tokenAmount;
            Transfer(owner, msg.sender, tokenAmount);
        } else {
            throw;
        }
    }

    function stopSale() onlyowner {
        isTokenSale = false;
    }

    function startSale() onlyowner {
        isTokenSale = true;
    }

    function setPrice(uint256 newPrice) onlyowner {
        price = newPrice;
    }

    function setLimit(uint256 newLimit) onlyowner {
        limit = newLimit;
    }

    function setWallet(address _to) onlyowner {
        walletOut = _to;
    }

    function sendFund() onlyowner {
        walletOut.send(this.balance);
    }

    /* ????????? ?????????? ?????? */
    string public name;                 // ????????
    uint8 public decimals;              // ??????? ?????????? ??????
    string public symbol;               // ????????????? (????????????? ??????)
    string public version = '1.0';      // ??????

    function CryptoShowCoin()
    {
        totalSupply = 2000000000000000;
        balances[msg.sender] = 2000000000000000;  // ???????? ????????? ???? ?????????? ?????
        name = 'CryptoShowCoin';
        decimals = 8;
        symbol = 'CSC';
        price = 1000000000000000;
        limit = 0;
    }

    
    /* ????????? ?? ???? ??????? */
    function add(uint256 _value) onlyowner returns (bool success)
    {
        totalSupply += _value;
        balances[msg.sender] += _value;
        return true;
    }


    
    /* ?????????? ?????? ?? ????? ????????? ????????? */
    function burn(uint256 _value) onlyowner returns (bool success)
    {
        if (balances[msg.sender] < _value) {
            return false;
        }
        totalSupply -= _value;
        balances[msg.sender] -= _value;
        return true;
    }


}