pragma solidity ^0.4.20;
//**???**???**//180419~
/*?? ??? 1wei??? ????? ?????
ex :
? ?? ?? 111
???18??? ??? ?? ?? 111 000 000 000 000 000 000(wei???)
1?? ??
?? ?? 110999999999999999999
??Value * 10 ** uint256(??????)? ?? ???? 1?? ??? 110 000 000 000 000 000 000
*/
//?? ??? ?? 18 / ???? payable , transfer?? ???? ??? ??
//???? ???? ??? 1ETH=1000000000000000000Wei ?? ??? ??18?? ??? ??? ???18? ??? payable, transfer ?? ?? ???
//** public? ??? ??,??? ?? ????? ????**//
contract TokenERC20
{
  //?? ??
  string public name;
  //?? ??(??)
  string public symbol;
  //?? ?? ??? ??
  uint8 public decimals;
  //wei ??? ??? ?? ?? ??
  uint256 _decimals;
  //??*2=??
  uint256 public tokenReward;
  //? ?? ?? ??
  uint256 public totalSupply;
  //?? admin
  address public owner;
  //?? ?? (text? ???? ???) ex :  private ,  public , test , demo
  string public status;
  //?? ?? ?? ????? (????) // http://www.4webhelp.net/us/timestamp.php ?? ????
  uint256 public start_token_time;
  //?? ?? ?? ????? (????)
  uint256 public stop_token_time;
  ///////GMB ??? 3??? ?? ??? ??? ???? ??? ???!!
  uint256 public transferLock;

  //owner?? ???? ??
  modifier isOwner
  {
    assert(owner == msg.sender);
    _;
  }

  //???? ???? ?? ???(MIST UI? ????)
  mapping (address => uint256) public balanceOf;

  //??? ??? ???
  event Transfer(address indexed from, address indexed to, uint256 value);
  event token_Burn(address indexed from, uint256 value);
  event token_Add(address indexed from, uint256 value);
  event Deposit(address _sender, uint amount ,string status);
  event change_Owner(string newOwner);
  event change_Status(string newStatus);
  event change_Name(string newName);
  event change_Symbol(string newSymbol);
  event change_TokenReward(uint256 newTokenReward);
  event change_Time_Stamp(uint256 change_start_time_stamp,uint256 change_stop_time_stamp);

  //?? ??? ??
  function TokenERC20() public
  {
    //?? ?? ???
    name = "GMB";
    //?? ??(??) ???
    symbol = "MAS";
    //??? ?? ???
    decimals = 18;
    //wei ??? ??? ?? ?? ??
    _decimals = 10 ** uint256(decimals);
    //ETH , ?? ????
    tokenReward = 0;
    //?? ?? ?? ???
    totalSupply =  _decimals * 10000000000; //1???
    //?? ?? ???
    status = "Private";
    //????? ??? (????) 2018.1.1 00:00:00 (Gmt+9)
    start_token_time = 1514732400;
    //????? ??? (????)  2018.12.31 23:59:59 (Gmt+9)
    stop_token_time = 1546268399;
    //?? ??? ?? ?? ???
    owner = msg.sender;
    //??? ????? ??????? ??
    balanceOf[msg.sender] = totalSupply;
    ///////GMB ??? ?3??? ?? ??? ??? ???? ??? ???!!
    transferLock = 1; //0??? transfer ??
  }
  //*?? ??? ?? ??*//
  function() payable public
  {
    //??? ??
    uint256 cal;
    //?? ?? ?? ????? (????)
    require(start_token_time < block.timestamp);
    //?? ?? ?? ????? (????)
    require(stop_token_time > block.timestamp);
    //ETH????,ETH??? ???? ??
    emit Deposit(msg.sender, msg.value, status);
    //??=??*2
    cal = (msg.value)*tokenReward;
    //?? ???? ???? ???? ???? ???? ??? ??
    require(balanceOf[owner] >= cal);
    //????? ??
    require(balanceOf[msg.sender] + cal >= balanceOf[msg.sender]);
    //?????? ??
    balanceOf[owner] -= cal;
    //?? ????? ?? ??
    balanceOf[msg.sender] += cal;
    //??? ??? ??
    emit Transfer(owner, msg.sender, cal);
  }
  //*?? ??*// ex : 1?? ??? 1 000 000 000 000 000 000(Mist UI ??? ?????? ??, Mist UI ?? ??? ?????? 1)
  function transfer(address _to, uint256 _value) public
  {
    ///////GMB ??? ?3??? ?? ??? ??? ???? ??? ???!!
    require(transferLock == 0); //0??? transfer ??
    //?? ???? ???? ???? ???? ???? ??? ??
    require(balanceOf[msg.sender] >= _value);
    //????? ??
    require((balanceOf[_to] + _value) >= balanceOf[_to]);
    //?????? ??
    balanceOf[msg.sender] -= _value;
    //?? ????? ?? ??
    balanceOf[_to] += _value;
    //??? ??? ??
    emit Transfer(msg.sender, _to, _value);
  }
  //*?? ?? geth?? ??? ????? __decimals? ???*// ex : 1?? ??? 1
  function admin_transfer(address _to, uint256 _value) public isOwner
  {
    //tokenValue = _value;
    //?? ???? ???? ???? ???? ???? ??? ??
    require(balanceOf[msg.sender] >= _value*_decimals);
    //????? ??
    require(balanceOf[_to] + (_value *_decimals)>= balanceOf[_to]);
    //?????? ??
    balanceOf[msg.sender] -= _value*_decimals;
    //?? ????? ?? ??
    balanceOf[_to] += _value*_decimals;
    //??? ??? ??
    emit Transfer(msg.sender, _to, _value*_decimals);
  }
  //*???? ???? ?? ??* ???// ex : 1?? ??? 1
  function admin_from_To_transfer(address _from, address _to, uint256 _value) public isOwner
  {
    //tokenValue = _value;
    //?? ???? ???? ???? ???? ???? ??? ??
    require(balanceOf[_from] >= _value*_decimals);
    //????? ??
    require(balanceOf[_to] + (_value *_decimals)>= balanceOf[_to]);
    //?????? ??
    balanceOf[_from] -= _value*_decimals;
    //?? ????? ?? ??
    balanceOf[_to] += _value*_decimals;
    //??? ??? ??
    emit Transfer(_from, _to, _value*_decimals);
  }
  //*? ?? ?? ??*// ex : 1?? ??? 1
  function admin_token_burn(uint256 _value) public isOwner returns (bool success)
  {
    //???? ????? ????? ???? ??? ??
    require(balanceOf[msg.sender] >= _value*_decimals);
    //?? ???? ??
    balanceOf[msg.sender] -= _value*_decimals;
    //? ?? ???? ??
    totalSupply -= _value*_decimals;
    //??? ??? ??
    emit token_Burn(msg.sender, _value*_decimals);
    return true;
  }
  //*? ?? ?? ??*// ex : 1?? ??? 1
  function admin_token_add(uint256 _value) public  isOwner returns (bool success)
  {
    require(balanceOf[msg.sender] >= _value*_decimals);
    //?? ???? ??
    balanceOf[msg.sender] += _value*_decimals;
    //? ?? ???? ??
    totalSupply += _value*_decimals;
    //??? ??? ??
    emit token_Add(msg.sender, _value*_decimals);
    return true;
  }
  //*?? ??*//  ***???? ??? ??? ?????? ??? ??(???? ?? ????? ???)***
  function change_name(string _tokenName) public isOwner returns (bool success)
  {
    //name ?????
    name = _tokenName;
    //??? ??? ??
    emit change_Name(name);
    return true;
  }
  //*?? ??*//  ***???? ??? ??? ?????? ??? ??(???? ?? ????? ???)***
  function change_symbol(string _symbol) public isOwner returns (bool success)
  {
    //symbol ?????
    symbol = _symbol;
    //??? ??? ??
    emit change_Symbol(symbol);
    return true;
  }
  //*status??*//
  function change_status(string _status) public isOwner returns (bool success)
  {
    //status ?????
    status = _status;
    //??? ??? ??
    emit change_Status(status);
    return true;
  }
  //*?? ??*//
  function change_tokenReward(uint256 _tokenReward) public isOwner returns (bool success)
  {
    //tokenReward ?????
    tokenReward = _tokenReward;
    //??? ??? ??
    emit change_TokenReward(tokenReward);
    return true;
  }
  //*ETH??*//
  function ETH_withdraw(uint256 amount) public isOwner returns(bool)
  {
    //????? ?????? ??? wei??? ?? //1ETH ??? 1 000 000 000 000 000 000 ?? ???
    owner.transfer(amount);
    //????? ?? ???? ???? ??? ????? emit ???? ???? ??
    return true;
  }
  //*time_stamp??*//
  function change_time_stamp(uint256 _start_token_time,uint256 _stop_token_time) public isOwner returns (bool success)
  {
    //start_token_time? ?????
    start_token_time = _start_token_time;
    //stop_token_time? ?????
    stop_token_time = _stop_token_time;

    //??? ??? ??
    emit change_Time_Stamp(start_token_time,stop_token_time);
    return true;
  }
  //*owner??*//
  function change_owner(address to_owner) public isOwner returns (bool success)
  {
    //owner? ?????
    owner = to_owner;
    //??? ??? ??
    emit change_Owner("Owner_change");
    return true;
  }
  //*transferLock??*// 0??? lock ??
  function setTransferLock(uint256 transferLock_status) public isOwner returns (bool success)
  {
    //transferLock ?????
    transferLock = transferLock_status;
    //transferLock? ?? ???? ???? ??? ????? emit ???? ???? ??
    return true;
  }
  //*time_stamp??,status ??*//
  function change_time_stamp_status(uint256 _start_token_time,uint256 _stop_token_time,string _status) public isOwner returns (bool success)
  {
    //start_token_time? ?????
    start_token_time = _start_token_time;
    //stop_token_time? ?????
    stop_token_time = _stop_token_time;
    //status ?????
    status = _status;
    //??? ??? ??
    emit change_Time_Stamp(start_token_time,stop_token_time);
    //??? ??? ??
    emit change_Status(status);
    return true;
  }
}